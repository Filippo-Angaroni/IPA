/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var ipachars;
ipachars = ["\u0251", "\xE6", "\u0250", "\u0251\u0303", "\u03B2", "\u0253", "\u0299", "\xE7", "\u0255", "\xF0", "d\u0361\u0292", "\u0256", "\u0257", "\u0259", "\u025A", "\u0275", "\u0258", "\u025B", "\u025C", "\u025D", "\u025B\u0303", "\u025E", "\u0260", "\u0262", "\u029B", "\u0261", "\u0127", "\u0266", "\u0265", "\u0267", "\u029C", "\u026A", "\u0268", "\u026A\u0308", "\u029D", "\u025F", "\u0284", "\u026B", "\u026D", "\u026C", "\u029F", "\u026E", "\u0271", "\u014B", "\u0272", "\u0273", "\u0274", "\u0254", "\u0153", "\u0252", "\u0254\u0303", "\u0276", "\xF8", "\u0278", "\u027E", "\u0279", "\u0281", "\u0280", "\u027B", "\u027D", "\u027A", "\u0283", "\u0282", "\u03B8", "t\u0361\u0283", "t\u0361s", "\u0288", "\u028A", "\u0289", "\u028C", "\u028B", "\u2C71", "\u026F", "\u028D", "\u0270", "\u03C7", "\u0263", "\u028E", "\u028F", "\u0264", "\u0292", "\u0290", "\u0291", "\u0294", "\u0295", "\u02A1", "\u02A2", "\u02D0"];
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SampleSettingTab(this.app, this));
    const statusbaritem = this.addStatusBarItem();
    statusbaritem.onclick = (event) => {
      if (this.checkMenuExistance() == true) {
        this.removeMenu();
        (0, import_obsidian.setIcon)(statusbaritem, "chevron-up-square");
      } else {
        this.createMenu();
        (0, import_obsidian.setIcon)(statusbaritem, "chevron-down-square");
      }
    };
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
      let checkExist = false;
      this.app.workspace.containerEl.childNodes.forEach((element) => {
        if (String(element.id) == "UniverseMainDiv") {
          checkExist = true;
          this.app.workspace.containerEl.removeChild(element);
          (0, import_obsidian.setIcon)(statusbaritem, "chevron-up-square");
        }
      });
      if (checkExist == false) {
        this.createMenu();
        (0, import_obsidian.setIcon)(statusbaritem, "chevron-down-square");
      }
    });
  }
  checkMenuExistance() {
    let checkExist = false;
    this.app.workspace.containerEl.childNodes.forEach((element) => {
      if (String(element.id) == "UniverseMainDiv") {
        checkExist = true;
      }
    });
    return checkExist;
  }
  removeMenu() {
    this.app.workspace.containerEl.childNodes.forEach((element) => {
      if (String(element.id) == "UniverseMainDiv") {
        this.app.workspace.containerEl.removeChild(element);
      }
    });
  }
  createMenu() {
    const cl = this.app.workspace.containerEl;
    const mainmenu = cl.createEl("div", { cls: "main-div" });
    mainmenu.id = "UniverseMainDiv";
    const submainmenu = mainmenu.createEl("div", { cls: "sub-main-div" });
    const searcher = submainmenu.createEl("input", { cls: "searcher" });
    searcher.type = "search";
    const collectiontab = submainmenu.createEl("div", { cls: "collection-tab" });
    const collectionheader = collectiontab.createEl("div", { cls: "collection-tab-item" });
    const collectionheadericon = collectionheader.createEl("i", { cls: "collection-header-icon" });
    (0, import_obsidian.setIcon)(collectionheadericon, "chevron-down");
    collectionheadericon.onclick = (event) => {
      if (preferedcollection.style.display == "none") {
        preferedcollection.style.display = "block";
        (0, import_obsidian.setIcon)(collectionheadericon, "chevron-up");
      } else {
        preferedcollection.style.display = "none";
        (0, import_obsidian.setIcon)(collectionheadericon, "chevron-down");
      }
    };
    const preferedcollection = submainmenu.createEl("div", { cls: "char-tab" });
    preferedcollection.style.display = "none";
    const preferedcollectiongrid = preferedcollection.createEl("div", { cls: "char-grid" });
    preferedcollection.style.height = "50%";
    this.settings.mySetting.split(";").forEach((element) => {
      const chardiv = preferedcollectiongrid.createEl("div", { cls: "char-div" });
      chardiv.onclick = (evenet) => {
        this.addChar(element);
      };
      const char = chardiv.createEl("span", { text: element });
    });
    const chartab = submainmenu.createEl("div", { cls: "char-tab" });
    const chargrid = chartab.createEl("div", { cls: "char-grid" });
    for (let i = 0; i < ipachars.length; i++) {
      const chardiv = chargrid.createEl("div", { cls: "char-div" });
      chardiv.onclick = (evenet) => {
        this.addChar(ipachars[i]);
      };
      const char = chardiv.createEl("span", { text: ipachars[i] });
    }
  }
  addChar(ipachar) {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view) {
      const cursor = view.editor.getCursor();
      view.editor.replaceRange(ipachar, view.editor.getCursor());
      view.editor.setCursor(cursor.line, cursor.ch + 1);
    }
  }
  createPreferedMenu() {
  }
  onunload() {
    this.removeMenu();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const tre = createEl("div", { text: "ciao", cls: "setting-main" });
    new import_obsidian.Setting(containerEl).setName("Favorites Characters").setDesc("Insert your favorite characters separated by ;").addText((text) => text.setPlaceholder("a;b;c;d").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
